Project Structure
/app
  /auth
    /callback    # Handle Supabase auth callbacks
    /sign-in     # Sign in page
    /sign-up     # Sign up page
  /polls
    /[id]        # Individual poll view
    /create      # Poll creation
    /my-polls    # User's polls
    page.tsx     # All polls listing
  /api
    /polls
      /route.ts  # Poll CRUD operations
    /votes
      /route.ts  # Voting endpoints
    /qr
      /route.ts  # QR code generation
/components
  /polls        # Poll-related components
  /auth         # Auth components
  /ui           # Shared UI components
/lib
  /supabase     # Supabase client config
  /utils        # Shared utilities
  /types        # TypeScript types

Technical Architecture

1. Frontend (Next.js 14 App Router)
   - Server Components for initial data fetching and SEO
   - Client Components for interactive features (voting, real-time updates)
   - Route Handlers for API endpoints
   - Edge Runtime on Vercel for optimal performance

2. Backend (Supabase)
   Database Schema:
   polls (
     id uuid primary key,
     title text not null,
     description text,
     created_by uuid references auth.users,
     created_at timestamp with time zone default now(),
     expires_at timestamp with time zone,
     is_multiple_choice boolean default false,
     max_votes_per_user int default 1
   )

   options (
     id uuid primary key,
     poll_id uuid references polls on delete cascade,
     text text not null
   )

   votes (
     id uuid primary key,
     poll_id uuid references polls,
     option_id uuid references options,
     user_id uuid references auth.users,
     created_at timestamp with time zone default now(),
     unique(poll_id, user_id, option_id),    -- Prevent duplicate votes for same option
     constraint check_vote_limit check ((
       select count(*) 
       from votes v 
       where v.poll_id = poll_id 
       and v.user_id = user_id
     ) <= (
       select max_votes_per_user 
       from polls 
       where id = poll_id
     ))
   )

3. Authentication & Security
   - Supabase Auth for user management
   - Row Level Security (RLS) policies:
     - Anyone can view public polls
     - Only authenticated users can vote
     - Users can only edit/delete their own polls
   - Server-side validation for vote integrity
   - Duplicate Vote Prevention:
     - Database-level constraints (unique composite index)
     - Application-level validation
     - Real-time vote count tracking
     - Rate limiting on vote endpoints

4. Real-time Features
   - Supabase Realtime for live vote updates
   - Optimistic UI updates with server validation
   - WebSocket connections for instant results

5. QR Code Implementation
   - Generate QR codes using qrcode library
   - Encode poll URLs with unique identifiers
   - Cache generated QR codes in Edge Cache
   - Integration with Poll Creation:
     1. QR code automatically generated after poll creation
     2. QR code stored in Supabase Storage
     3. QR code URL added to poll metadata
     4. Download/Share options in poll dashboard
     5. API endpoint for regenerating QR codes
     6. QR code leads to mobile-optimized poll view

6. Supabase Authentication Setup
   - Initial Setup Requirements:
     1. Create a Supabase project in the Supabase dashboard
     2. Configure Email/Password authentication in Auth settings
     3. Set up redirect URLs for authentication callbacks
     4. Obtain API keys (public anon key and service role key)

   - Next.js Integration Steps:
     1. Install required packages: @supabase/auth-helpers-nextjs, @supabase/supabase-js
     2. Create environment variables for Supabase URL and API keys
     3. Set up Supabase client configuration in /lib/supabase
     4. Implement middleware.ts for session handling and protected routes
     5. Create auth API route handlers for server-side authentication

   - Authentication Flow:
     1. User enters email/password on login form
     2. Client sends credentials to Supabase Auth API
     3. Supabase validates credentials and returns session
     4. Session is stored in cookies via middleware
     5. Protected routes check session validity
     6. Auth state is managed through React context or hooks

   - Security Considerations:
     1. Implement CSRF protection
     2. Set secure and HTTP-only cookies
     3. Configure proper CORS settings
     4. Implement rate limiting for auth endpoints
     5. Add email verification workflow

   - User Management Features:
     1. Password reset functionality
     2. Email verification
     3. Account settings page
     4. Profile information management
     5. Session management (view active sessions, logout from all devices)

Recommended Libraries

1. Core Dependencies
   - @supabase/auth-helpers-nextjs: Authentication utilities
   - @supabase/supabase-js: Supabase client
   - @tanstack/react-query: Data fetching and caching
   - zod: Schema validation
   - qrcode: QR code generation

2. UI Components
   - shadcn/ui: Pre-built components
   - @radix-ui/react: Accessible UI primitives
   - tailwindcss: Styling
   - framer-motion: Animations

3. Development Tools
   - typescript: Type safety
   - eslint: Code quality
   - prettier: Code formatting
   - jest & @testing-library/react: Testing

Scalability Considerations

1. Performance Optimization
   - Static Generation for poll pages
   - Incremental Static Regeneration for updated content
   - Edge Caching for QR codes and static assets
   - Connection pooling for database queries

2. Database Optimization
   - Indexed columns for frequent queries
   - Materialized views for vote counts
   - Periodic cleanup of expired polls
   - Pagination for poll listings

3. Security Measures
   - Rate limiting for vote submissions
   - CORS policies for API endpoints
   - Input sanitization
   - Request validation with Zod